[
  {
    "keywords": [
      ""
    ],
    "title": "Bot không biết",
    "label": "dontknow",
    "messageContent": [
      "Xin lỗi cái này mình không biết mong bạn thông cảm, mình sẽ cải thiện để thông minh hơn."
    ]
  },

  {
    "keywords": [
      "hello",
      "hi",
      "xin chao",
      "xin chào",
      "chao",
      "chào",
      "hey"
    ],
    "title": "Xin chào",
    "label": "wellcome",
    "messageContent": [
      "Chào bạn mình là chatbot hỗ trợ học lập trình hướng đối tượng. Mình thông minh lắm, hi vọng mình giúp được bạn."
    ]
  },

  {
    "keywords": [
      "private",
      "riêng tư",
      "phạm vi private"
    ],
    "title": "Khái niệm Private",
    "label": "private",
    "messageContent": [
      "Private là một trong những phạm vi truy cập trong OOP. Các phần tử được khai báo private chỉ được truy xuất thông qua class (lớp) chứa nó.",
      "Bạn muốn xem thêm không?",
      "[res]phạm vi truy cập",
      "[res]public",
      "[res]protected"
    ]
  },
  
  {
    "keywords": [
      "public",
      "công cộng",
      "công khai",
      "phạm vi public"
    ],
    "title": "Khái niệm Public",
    "label": "public",
    "messageContent": [
      "Public là một trong những phạm vi truy cập trong OOP. Các phần tử được khai báo public thì được truy xuất ở mọi nơi bao gồm trong class (lớp) và ngoài class.",
      "[res]phạm vi truy cập",
      "[res]private",
      "[res]protected"
    ]
  },

  {
    "keywords": [
      "protected",
      "bảo vệ",
      "phạm vi protected"
    ],
    "title": "Khái niệm Protected",
    "label": "protected",
    "messageContent": [
      "Protected là một trong những phạm vi truy cập trong OOP. Các phần tử được khai báo protected thì được truy xuất thông qua lớp chứa nó và lớp con của nó.",
      "[res]phạm vi truy cập",
      "[res]public",
      "[res]private"
    ]
  },
  
  {
    "keywords": [
      "oop",
      "lập trình hướng đối tượng",
      "hướng đối tượng"
    ],
    "title": "Khái niệm OOP",
    "label": "defineOOP",
    "messageContent": [
      "Lập trình hướng đối tượng (Object Oriented Programming, viết tắt: OOP) là một kỹ thuật lập trình cho phép lập trình viên tạo ra các đối tượng trong code, trừu tượng hóa các đối tượng thực tế trong cuộc sống."
    ]
  },
  
  {
    "keywords": [
      "object",
      "đối tượng"
    ],
    "title": "Đối tượng là gì?",
    "label": "defineObject",
    "messageContent": [
      "Đối tượng (Object) có thể là con người, điện thoại, máy tính, bạn và tôi... và điểm chung là đều gồm 2 thành phần chính là:  Thuộc tính (Attribute): là những thông tin, đặc điểm của đối tượng. Phương thức (Method): là những hành động mà đối tượng có thể thực hiện.",
      "Đối tượng được khai báo như vầy: \n[tên class] [tên đối tượng];",
      "https://i.postimg.cc/kGLFKvSh/object.jpg",
      "Với Box là tên class, còn box1 là tên đối tượng. ok hong!",
      "Bạn muốn tìm hiểu: ",
      "[res]lớp là gì",
      "[res]thuộc tính",
      "[res]phương thức",
      "[res]phạm vi truy cập"
    ]
  },
  
  {
    "messageContent": [
      "Ví dụ chúng ta có đối tượng \"Con người\" =>  Thuộc tính sẽ bao gồm: chiều cao, cân nặng, trình độ học vấn,... Phương thức sẽ bao gồm: ăn, uống, chạy, nhảy,... ",
      "Ví dụ chúng ta có đối tượng \"Yasuo\" =>  Thuộc tính sẽ bao gồm: sát thương vật lý, sát thương phép, giáp, kháng phép,... Phương thức sẽ bao gồm: di chuyển, xuất chiêu tường gió, trăn trối kẻ địch, ks,...",
      "Ví dụ chúng ta có đối tượng \"Laptop\" => Thuộc tính sẽ bao gồm: tên máy, dung lượng ram, tên cpu,... Phương thức sẽ bao gồm: khởi động, tắt máy, diệt virus,..."
    ],
    "keywords": [
      "example object, ví dụ đối tượng"
    ],
    "title": "Ví dụ đối tượng",
    "label": "exampleObject"
  },

  {
    "messageContent": [
      "Lập trình hướng đối tượng được bao gồm từ 4 đặc tính sau:",
      "\t-Tính đóng gói (encapsulation): để che dấu xử lý bên trong của đối tượng, các đối tượng khác không thể tác động trực tiếp vào thành phần được đóng gói này mà phải thông qua các phương thức (method) public của đối tượng đó. Như hình dưới đây các thuộc tính được gắn nhãn private chỉ được truy xuất thông qua các hàm public.","https://i.postimg.cc/Pq6XS3qJ/class.jpg",
      "\t-Tính kế thừa (inheritance): là đặc tính cho một lớp được kế thừa các tính năng của một lớp đã có, giúp tránh việc trùng lập code.",
      "\t-Tính đa hình (polymorphism): được hiểu như thế này, các đối tượng khác nhau thuộc các lớp khác nhau nhưng có thể cùng hiểu một thông điệp theo cách khác nhau. Như mèo và chó thì có thể hiểu \"cách ăn\" khác nhau.",
      "\t-Tính trừu tượng (abstraction): là một phương pháp trừu tượng hóa định nghĩa các hành động, tính chất của đối tượng cần phải có.",
      "Để hiểu rõ thêm thì bạn có thể xem: ",
      "[res]tính đóng gói",
      "[res]tính kế thừa",
      "[res]tính đa hình",
      "[res]tính trừu tượng"
    ],
    "keywords": [
      "đặc tính",
      "đa hình",
      "trừu tượng",
      "kế thừa",
      "đóng gói"
    ],
    "title": "Đặc tính lập trình hướng đối tượng",
    "label": "specificity"
  },
  
  {
    "messageContent": [
      "Tính đóng gói (encapsulation) không cho phép người dùng trực tiếp tác động đến dữ liệu bên trong đối tượng mà phải thông qua các phương thức mà đối tượng cung cấp nhằm đảm bảo tính toàn vẹn của đối tượng.",
      "https://i.postimg.cc/bJnZXWJh/dongGoi.jpg",
      "Ví dụ như lớp Hình vuông thuộc tính cạnh được đặt private (riêng tư) vì thế không thể truy cập hay thay đổi này trực tiếp từ bên ngoài. Chỉ có thể sử dụng thuộc tính cạnh bằng các phương thức được định nghĩa nội bộ trong lớp như: phương thức getCanh() sẽ trả về giá trị của cạnh, phương thức setCanh() sẽ đặt lại giá trị của cạnh.",
      "Còn có các đặc tính sau:",
      "[res]tính kế thừa",
      "[res]tính đa hình",
      "[res]tính trừu tượng"
    ],
    "keywords": [
      "tính đóng gói",
      "encapsulation"
    ],
    "title": "tính đóng gói",
    "label": "encapsulation"
  },
  
  {
    "messageContent": [
      "Tính trừu tượng (abstraction) chỉ ra tính năng của người dùng, các khái niệm được định nghĩa trong quá trình phát triển, bỏ qua những chi tiết triển khai bên trong. Tính trừu tượng cho phép người lập trình tập trung cốt lõi cần thiết của đối tượng thay vì quan tâm sự phức tạp bên trong hoặc cách nó hoạt động.",
      "https://i.postimg.cc/9Qzqn5X0/truu-Tuong.jpg",
      "Ví dụ như hình chúng ta có lớp Hình là một lớp trừu tượng và phương thức TinhChuVi không có định nghĩa cụ thể nhưng với 2 lớp con của nó thì được định nghĩa rõ ràng.",
      "Còn có các đặc tính sau:",
      "[res]tính kế thừa",
      "[res]tính đa hình",
      "[res]tính đóng gói"
    ],
    "keywords": [
      "tính trừu tượng",
      "abstraction"
    ],
    "title": "Tính trừu tượng",
    "label": "abstraction"
  },
  
  {
    "messageContent": [
      "Tính kế thừa (inheritance) cho phép kế thừa, tái sử dụng phương thức, thuộc tính của lớp cha. Lớp kế thừa được gọi là lớp con, nó sẽ thừa hưởng những gì lớp cha có và cho phép.",
      "https://i.postimg.cc/c4WHVKZr/keThua.jpg",
      "Ví dụ như hình chúng ta có Lớp cha Con vật chứa thuộc tính chiều cao và cân nặng. Các lớp con kế thừa những thuộc tính này, vì thế các lớp con chó, con mèo, con chuột cũng sẽ ngầm định là có các thuộc tính như chiều cao và cân nặng.",
      "Còn có các đặc tính sau:",
      "[res]tính đóng gói",
      "[res]tính đa hình",
      "[res]tính trừu tượng"
    ],
    "keywords": [
      "tính kế thừa",
      "inheritance"
    ],
    "title": "Tính kế thừa",
    "label": "inheritance"
  },
  
  {
    "messageContent": [
      "Tính đa hình (polymorphism) có thể nói luôn tồn tại song song với tính kế thừa. Khi có nhiều lớp con kế thừa lớp cha nhưng có những tính chất khác nhau cũng gọi là đa hình, hoặc những tác vụ trong cùng một đối tượng được thể hiện nhiều cách khác nhau cũng gọi là đa hình. Tính đa hình là kết quả tất yếu khi ta phát triển khả năng kế thừa và nâng cấp chương trình.",
      "https://i.postimg.cc/9Qzqn5X0/truu-Tuong.jpg",
      "Ví dụ cùng là phương thức TinhChuVi nhưng Hình vuông lại có cách tính khác và hình tròn có cách tính khác.",
      "Còn có các đặc tính sau:",
      "[res]tính kế thừa",
      "[res]tính đóng gói",
      "[res]tính trừu tượng"
    ],
    "keywords": [
      "tính đa hình",
      "tính đa thể",
      "polymorphism"
    ],
    "title": "Tính đa hình",
    "label": "polymorphism"
  },
  
  {
    "messageContent": [
      "Có nhiều ngôn ngữ hỗ trợ lập trình hướng đối tượng hiện nay, điển hình trong đó có: Java, C#, C++, JavaScript, Python, PHP, Dart, Perl,..."
    ],
    "keywords": [
      "ngôn ngữ hướng đối tượng"
    ],
    "title": "Ngôn ngữ lập trình",
    "label": "langCode"
  },
   
  {
    "messageContent": [
      "Phương pháp phát triển hướng đối tượng cho phép chúng ta chia sẻ các thông tin trong ứng dụng, tái sử dụng các đoạn mã, dễ dàng tạo ra sản phẩm mới dựa trên các lớp đối tượng đã xây dựng.",
      "Tính kế thừa trong lập trình hướng đối tượng góp phần lớn thúc đẩy việc tái sử dụng.",
      "[res]các đặc tính của lập trình hướng đối tượng."
    ],
    "keywords": [
      "tính tái sử dụng"
    ],
    "title": "Tái sử dụng",
    "label": "reuse"
  },

  {
    "messageContent": [
      "Đây là phần test",
      "https://i.postimg.cc/V65g78cf/42109-Kawasaki-Ninja-H2-R-009.jpg"
    ],
    "keywords": [
      "test"
    ],
    "title": "test",
    "label": "test"
  },

  {
    "messageContent": [
      "Lớp (class) gọi tắt của \"nhóm các đối tượng\" là nhóm của các đối tượng có cùng thuộc tính, có hành vi như nhau và cũng như các mối quan hệ như nhau. Ví dụ như: lớp người, lớp động vật, cây cối,...",
      "Mỗi một đối tượng được gọi là một trường hợp hay còn được gọi là thể hiện (instance) của lớp.",
      "Có thể hiểu đơn giản, lớp như là một cái khuôn dùng để đúc ra các đối tượng.",
      "Lớp trong C++ được khai báo như vầy nè:",
      "https://i.postimg.cc/Pq6XS3qJ/class.jpg",
      "giờ tìm hiểu tiếp nha: ",
      "[res]đối tượng"
    ],
    "keywords": [
      "class",
      "lớp",
      "lop"
    ],
    "title": "Lớp các đối tượng",
    "label": "class"
  },

  {
    "messageContent": [
      "Thuộc tính là một đặc tính mà đối tượng cần phải có, khi được mô tả trong một lớp thì được gọi là thuộc tính.",
      "Mỗi một đối tượng là một trường hợp cụ thể của một lớp, mỗi trường hợp thuộc tính có giá trị riêng, nhưng có chung tên thuộc tính và các hành vi với các trường hợp khác của lớp."
    ],
    "keywords": [
      "thuộc tính",
      "property",
      "đăc tính",
      "thuoc tinh"
    ],
    "title": "Thuộc tính",
    "label": "property"
  },
  
  {
    "messageContent": [
      "Phương thức là một hành động mà một đối tượng hoặc thực thể cần phải có, khi được mô tả trong một lớp được gọi là một phương thức.",
      "Ví dụ nha: trong lớp đa giác thi ta có Vẽ, Xóa Di chuyển là các phương thức của lớp này."
    ],
    "keywords": [
      "phương thức",
      "method",
      "phuong thuc"
    ],
    "title": "Phương thức",
    "label": "method"
  },

  {
    "messageContent": [
      "Thành viên của lớp là các thuộc tính và phương thức được gắn vào lớp đó. Khi thuộc tính hay phương thức thành viên được gọi thì nó tác động lên đối tượng cụ thể chứ không phải lớp của đối tượng đó.",
      "Để gọi thành viên của một lớp ta dùng dấu chấm \".\" như ví dụ bên dưới",
      "https://i.postimg.cc/1trYPTLc/object.jpg"
    ],
    "keywords": [
      "member",
      "thành viên",
      "thanh vien"
    ],
    "title": "Thành viên lớp",
    "label": "member"
  },

  {
    "messageContent": [
      "Phạm vi truy cập là phạm vi mà dữ liệu như thuộc tính, phương thức hoặc lớp được phép truy cập. Có 3 phạm vi truy cập chính là: public, private và protected.",
      "\tpublic: các thành phần mang từ khóa này được truy xuất bất kì hàm nào kể cả trong và ngoài lớp.",
      "\tprivate: các thành phần mang từ khóa này chỉ được truy xuất bên trong phạm vi của lớp chứa nó.",
      "\tprotected: các thành phần mang từ khóa này chỉ được truy xuất bên trong phạm vi của lớp chứa nó và các lớp con kế thừa từ lớp này.",
      "https://i.postimg.cc/9f1yh420/phamvitruycap.jpg"
    ],
    "keywords": [
      "phạm vi truy xuất",
      "phạm vi truy cập"
    ],
    "title": "Phạm vi truy cập",
    "label": "access"
  },

  {
    "messageContent": [
      "Đa kế thừa (multiple inheritance) là hiện tượng một lớp con được kế thừa từ nhiều lớp cha",
      "https://i.postimg.cc/FHZLkLLg/dakethua.jpg",
      "Như hình trên này ClassC được kế thừa từ hai lớp ClassA và ClassB nên ClassC được thừa hưởng các thuộc tính, phương thức của cả hai class ClassA và ClassB.",
      "Còn nữa, đa kế thừa cũng dẫn đến vấn đề nhập nhằng tên hàm khi cả hai lớp có hàm trùng tên. Vì thế trong C++ ta dùng toán tử phạm vi để truy cập đúng hàm mà ta cần.",
      "https://i.postimg.cc/vB3gpCWV/multimethod.jpg",
      "Bạn có thể xem thêm dưới đây thể xem kế thừa là gì nhá:",
      "[res]kế thừa"
    ],
    "keywords": [
      "đa kế thừa",
      "đa thừa kế",
      "multiple inheritance"
    ],
    "title": "Đa kế thừa",
    "label": "mulInheritance"
  },

  {
    "messageContent": [
      "hihi",
      "Cười gì! Bạn có biết oop là gì không?",
      "[res]oop"
    ],
    "keywords": [
      ""
    ],
    "title": "Cười",
    "label": "laugh"
  }
]