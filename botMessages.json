[
    {
    "keywords": [
      "private",
      "riêng tư",
      "phạm vi private"
    ],
    "title": "Khái niệm Private",
    "label": "private",
    "messageContent": [
      "Private là một trong những phạm vi truy cập trong OOP. Các phần tử được khai báo private chỉ được truy xuất thông qua class (lớp) chứa nó."
    ]
  },{
    "keywords": [
      "public",
      "công cộng",
      "công khai",
      "phạm vi public"
    ],
    "title": "Khái niệm Public",
    "label": "public",
    "messageContent": [
      "Public là một trong những phạm vi truy cập trong OOP. Các phần tử được khai báo public thì được truy xuất ở mọi nơi bao gồm trong class (lớp) và ngoài class."
    ]
  },{
    "keywords": [
      "oop ",
      "lập trình hướng đối tượng ",
      "hướng đối tượng"
    ],
    "title": "Khái niệm OOP",
    "label": "defineOOP",
    "messageContent": [
      "Lập trình hướng đối tượng (Object Oriented Programming, viết tắt: OOP) là một kỹ thuật lập trình cho phép lập trình viên tạo ra các đối tượng trong code trừu tượng hóa các đối tượng thực tế trong cuộc sống."
    ]
  },{
    "keywords": [
      "object ",
      "đối tượng"
    ],
    "title": "Đối tượng là gì?",
    "label": "defineObject",
    "messageContent": [
      "Đối tượng (Object) có thể là con người, điện thoại, máy tính, bạn và tôi... và điểm chung là đều gồm 2 thành phần chính là:  Thuộc tính (Attribute): là những thông tin, đặc điểm của đối tượng. Phương thức (Method): là những hành động mà đối tượng có thể thực hiện."
    ]
  },{
    "messageContent": [
      "Ví dụ chúng ta có đối tượng \"Con người\" =>  Thuộc tính sẽ bao gồm: chiều cao, cân nặng, trình độ học vấn,... Phương thức sẽ bao gồm: ăn, uống, chạy, nhảy,... ",
      "Ví dụ chúng ta có đối tượng \"Yasuo\" =>  Thuộc tính sẽ bao gồm: sát thương vật lý, sát thương phép, giáp, kháng phép,... Phương thức sẽ bao gồm: di chuyển, xuất chiêu tường gió, trăn trối kẻ địch, ks,...",
      "Ví dụ chúng ta có đối tượng \"Laptop\" => Thuộc tính sẽ bao gồm: tên máy, dung lượng ram, tên cpu,... Phương thức sẽ bao gồm: khởi động, tắt máy, diệt virus,..."
    ],
    "keywords": [
      "example object, ví dụ đối tượng"
    ],
    "title": "Ví dụ đối tượng",
    "label": "exampleObject"
  },{
    "messageContent": [
      "Tính đóng gói (encapsulation) không cho phép người dùng trực tiếp tác động đến dữ liệu bên trong đối tượng mà phải thông qua các phương thức mà đối tượng cung cấp nhằm đảm bảo tính toàn vẹn của đối tượng.",
      "https://i.postimg.cc/bJnZXWJh/dongGoi.jpg",
      "Ví dụ như lớp Hình vuông thuộc tính cạnh được đặt private (riêng tư) vì thế không thể truy cập hay thay đổi này trực tiếp từ bên ngoài. Chỉ có thể sử dụng thuộc tính cạnh bằng các phương thức được định nghĩa nội bộ trong lớp như: phương thức getCanh() sẽ trả về giá trị của cạnh, phương thức setCanh() sẽ đặt lại giá trị của cạnh."
    ],
    "keywords": [
      "tính đóng gói ",
      "encapsulation"
    ],
    "title": "tính đóng gói",
    "label": "encapsulation"
  },{
    "messageContent": [
      "Tính trừu tượng (abstraction) chỉ ra tính năng của người dùng, các khái niệm được định nghĩa trong quá trình phát triển, bỏ qua những chi tiết triển khai bên trong. Tính trừu tượng cho phép người lập trình tập trung cốt lõi cần thiết của đối tượng thay vì quan tâm sự phức tạp bên trong hoặc cách nó hoạt động.",
      "https://i.postimg.cc/9Qzqn5X0/truu-Tuong.jpg",
      "Ví dụ như hình chúng ta có lớp Hình là một lớp trừu tượng và phương thức TinhChuVi không có định nghĩa cụ thể nhưng với 2 lớp con của nó thì được định nghĩa rõ ràng."
    ],
    "keywords": [
      "tính trừu tượng ",
      "abstraction"
    ],
    "title": "Tính trừu tượng",
    "label": "abstraction"
  },{
    "messageContent": [
      "Tính kế thừa (inheritance) cho phép kế thừa, tái sử dụng phương thức, thuộc tính của lớp cha. Lớp kế thừa được gọi là lớp con, nó sẽ thừa hưởng những gì lớp cha có và cho phép.",
      "https://i.postimg.cc/c4WHVKZr/keThua.jpg",
      "Ví dụ như hình chúng ta có Lớp cha Con vật chứa thuộc tính chiều cao và cân nặng. Các lớp con kế thừa những thuộc tính này, vì thế các lớp con chó, con mèo, con chuột cũng sẽ ngầm định là có các thuộc tính như chiều cao và cân nặng."
    ],
    "keywords": [
      "tính kế thừa ",
      "inheritance"
    ],
    "title": "Tính kế thừa",
    "label": "inheritance"
  },{
    "messageContent": [
      "Tính đa hình (polymorphism) có thể nói luôn tồn tại song song với tính kế thừa. Khi có nhiều lớp con kế thừa lớp cha nhưng có những tính chất khác nhau cũng gọi là đa hình, hoặc những tác vụ trong cùng một đối tượng được thể hiện nhiều cách khác nhau cũng gọi là đa hình. Tính đa hình là kết quả tất yếu khi ta phát triển khả năng kế thừa và nâng cấp chương trình.",
      "https://i.postimg.cc/9Qzqn5X0/truu-Tuong.jpg",
      "Ví dụ cùng là phương thức TinhChuVi nhưng Hình vuông lại có cách tính khác và hình tròn có cách tính khác."
    ],
    "keywords": [
      "tính đa hình ",
      "polymorphism"
    ],
    "title": "Tính đa hình",
    "label": "polymorphism"
  },{
    "messageContent": [
      "Có nhiều ngôn ngữ hỗ trợ lập trình hướng đối tượng hiện nay, điển hình trong đó có: Java, C#, C++, JavaScript, Python, PHP, Dart, Perl,..."
    ],
    "keywords": [
      "ngôn ngữ hướng đối tượng"
    ],
    "title": "Ngôn ngữ lập trình",
    "label": "langCode"
  },{
    "messageContent": [
      "Đây là phần test ",
      "https://i.postimg.cc/V65g78cf/42109-Kawasaki-Ninja-H2-R-009.jpg"
    ],
    "keywords": [
      "test"
    ],
    "title": "test",
    "label": "test"
  } 
]